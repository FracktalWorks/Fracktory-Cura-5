// qabstractoauth.sip generated by MetaSIP
//
// This file is part of the QtNetworkAuth Python extension module.
//
// Copyright (c) 2022 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt6-NetworkAuth.
// 
// This file may be used under the terms of the GNU General Public License
// version 3.0 as published by the Free Software Foundation and appearing in
// the file LICENSE included in the packaging of this file.  Please review the
// following information to ensure the GNU General Public License version 3.0
// requirements will be met: http://www.gnu.org/copyleft/gpl.html.
// 
// If you do not wish to use this file under the terms of the GPL version 3.0
// then you may purchase a commercial license.  For more information contact
// info@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


class QAbstractOAuth : QObject /NoDefaultCtors/
{
%TypeHeaderCode
#include <qabstractoauth.h>
%End

%ConvertToSubClassCode
    static struct class_graph {
        const char *name;
        sipTypeDef **type;
        int yes, no;
    } graph[] = {
        {sipName_QAbstractOAuth, &sipType_QAbstractOAuth, 2, 1},
        {sipName_QAbstractOAuthReplyHandler, &sipType_QAbstractOAuthReplyHandler, 5, -1},
        {sipName_QAbstractOAuth2, &sipType_QAbstractOAuth2, 4, 3},
        {sipName_QOAuth1, &sipType_QOAuth1, -1, -1},
        {sipName_QOAuth2AuthorizationCodeFlow, &sipType_QOAuth2AuthorizationCodeFlow, -1, -1},
        {sipName_QOAuthOobReplyHandler, &sipType_QOAuthOobReplyHandler, 6, -1},
        {sipName_QOAuthHttpServerReplyHandler, &sipType_QOAuthHttpServerReplyHandler, -1, -1},
    };
    
    int i = 0;
    
    sipType = NULL;
    
    do
    {
        struct class_graph *cg = &graph[i];
    
        if (cg->name != NULL && sipCpp->inherits(cg->name))
        {
            sipType = *cg->type;
            i = cg->yes;
        }
        else
            i = cg->no;
    }
    while (i >= 0);
%End

public:
    enum class Status
    {
        NotAuthenticated,
        TemporaryCredentialsReceived,
        Granted,
        RefreshingToken,
    };

    enum class Stage
    {
        RequestingTemporaryCredentials,
        RequestingAuthorization,
        RequestingAccessToken,
        RefreshingAccessToken,
    };

    enum class Error
    {
        NoError,
        NetworkError,
        ServerError,
        OAuthTokenNotFoundError,
        OAuthTokenSecretNotFoundError,
        OAuthCallbackNotVerified,
    };

    enum class ContentType
    {
        WwwFormUrlEncoded,
        Json,
    };

    virtual ~QAbstractOAuth();
    QString clientIdentifier() const;
    void setClientIdentifier(const QString &clientIdentifier);
    QString token() const;
    void setToken(const QString &token);
    QNetworkAccessManager *networkAccessManager() const;
    void setNetworkAccessManager(QNetworkAccessManager *networkAccessManager /KeepReference/);
    QAbstractOAuth::Status status() const;
    QUrl authorizationUrl() const;
    void setAuthorizationUrl(const QUrl &url);
    QVariantMap extraTokens() const;
    QAbstractOAuthReplyHandler *replyHandler() const;
    void setReplyHandler(QAbstractOAuthReplyHandler *handler /KeepReference/);
    virtual QNetworkReply *head(const QUrl &url, const QVariantMap &parameters = QVariantMap()) = 0;
    virtual QNetworkReply *get(const QUrl &url, const QVariantMap &parameters = QVariantMap()) = 0;
    virtual QNetworkReply *post(const QUrl &url, const QVariantMap &parameters = QVariantMap()) = 0;
    virtual QNetworkReply *put(const QUrl &url, const QVariantMap &parameters = QVariantMap()) = 0;
    virtual QNetworkReply *deleteResource(const QUrl &url, const QVariantMap &parameters = QVariantMap()) = 0;
    SIP_PYCALLABLE modifyParametersFunction() const;
%MethodCode
        // The callable, if any, is held in the user object.
        sipRes = sipGetUserObject((sipSimpleWrapper *)sipSelf);
        
        if (!sipRes)
            sipRes = Py_None;
        
        Py_INCREF(sipRes);
%End

    void setModifyParametersFunction(SIP_PYCALLABLE modifyParametersFunction /AllowNone/);
%MethodCode
        // Remove any existing callable.
        PyObject *func = sipGetUserObject((sipSimpleWrapper *)sipSelf);
        Py_XDECREF(func);
        
        // Save the new callable.
        if (a0 == Py_None)
        {
            func = 0;
        }
        else
        {
            func = a0;
            Py_INCREF(func);
        }
        
        sipSetUserObject((sipSimpleWrapper *)sipSelf, func);
        
        Py_BEGIN_ALLOW_THREADS
        
        sipCpp->setModifyParametersFunction([func](QAbstractOAuth::Stage stage, QMultiMap<QString,QVariant> *parameters) {
            if (func)
            {
                SIP_BLOCK_THREADS
        
                static const sipTypeDef *map = 0;
        
                if (!map)
                {
                    map = sipFindType("QMultiMap<QString,QVariant>");
                    Q_ASSERT(map);
                }
        
                PyObject *parameters_obj = sipConvertFromType(parameters, map, NULL);
        
                if (!parameters_obj)
                {
                    pyqt6_qtnetworkauth_err_print();
                }
                else
                {
                    PyObject *res = sipCallMethod(NULL, func, "FS", stage, sipType_QAbstractOAuth_Stage, parameters_obj);
        
                    if (!res)
                    {
                        pyqt6_qtnetworkauth_err_print();
                    }
                    else
                    {
                        Py_DECREF(res);
        
                        int iserr = 0;
                        QMultiMap<QString,QVariant> *updated = reinterpret_cast<QMultiMap<QString,QVariant> *>(sipForceConvertToType(parameters_obj, map, NULL, SIP_NO_CONVERTORS, NULL, &iserr));
        
                        if (iserr)
                        {
                            pyqt6_qtnetworkauth_err_print();
                        }
                        else
                        {
                            // Copy the updated parameters.
                            *parameters = *updated;
                            delete updated;
                        }
                    }
        
                    Py_DECREF(parameters_obj);
                }
        
                SIP_UNBLOCK_THREADS
            }
        });
        
        Py_END_ALLOW_THREADS
%End

    QAbstractOAuth::ContentType contentType() const;
    void setContentType(QAbstractOAuth::ContentType contentType);
    virtual void prepareRequest(QNetworkRequest *request, const QByteArray &verb, const QByteArray &body = QByteArray()) = 0;

public slots:
    virtual void grant() = 0;

signals:
    void clientIdentifierChanged(const QString &clientIdentifier);
    void tokenChanged(const QString &token);
    void statusChanged(QAbstractOAuth::Status status /ScopesStripped=1/);
    void authorizationUrlChanged(const QUrl &url);
    void extraTokensChanged(const QVariantMap &tokens);
    void contentTypeChanged(QAbstractOAuth::ContentType contentType /ScopesStripped=1/);
    void requestFailed(const QAbstractOAuth::Error error /ScopesStripped=1/);
    void authorizeWithBrowser(const QUrl &url);
    void granted();
    void finished(QNetworkReply *reply);
    void replyDataReceived(const QByteArray &data);

protected:
    void setStatus(QAbstractOAuth::Status status);
    QString callback() const;
    virtual void resourceOwnerAuthorization(const QUrl &url, const QMultiMap<QString, QVariant> &parameters);
    static QByteArray generateRandomString(quint8 length);
};

%ModuleHeaderCode
// Imports from QtCore.
typedef void (*pyqt6_qtnetworkauth_err_print_t)();
extern pyqt6_qtnetworkauth_err_print_t pyqt6_qtnetworkauth_err_print;
%End

%ModuleCode
// Imports from QtCore.
pyqt6_qtnetworkauth_err_print_t pyqt6_qtnetworkauth_err_print;
%End

%PostInitialisationCode
// Imports from QtCore.
pyqt6_qtnetworkauth_err_print = (pyqt6_qtnetworkauth_err_print_t)sipImportSymbol("pyqt6_err_print");
Q_ASSERT(pyqt6_qtnetworkauth_err_print);
%End
