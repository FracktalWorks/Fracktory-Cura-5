# The PEP 484 type hints stub file for the pySavitar module.
#
# Generated by SIP 6.7.11
#
# 


import enum


class MetadataEntry(wrapper):

    preserve = ... # type: bool
    type = ... # type: typing.Any
    value = ... # type: typing.Any

    @typing.overload
    def __init__(self, value: typing.Any) -> None: ...
    @typing.overload
    def __init__(self, value: typing.Any, type: typing.Any) -> None: ...
    @typing.overload
    def __init__(self, value: typing.Any, type: typing.Any, preserve: bool) -> None: ...
    @typing.overload
    def __init__(self, a0: 'MetadataEntry') -> None: ...


class SceneNode(wrapper):

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, a0: 'SceneNode') -> None: ...

    def setType(self, type: typing.Any) -> None: ...
    def getType(self) -> typing.Any: ...
    def addChild(self, child: typing.Optional['SceneNode']) -> bool: ...
    @typing.overload
    def setSetting(self, key: typing.Any, entry: MetadataEntry) -> None: ...
    @typing.overload
    def setSetting(self, key: typing.Any, value: typing.Any) -> None: ...
    @typing.overload
    def setSetting(self, key: typing.Any, value: typing.Any, type: typing.Any) -> None: ...
    @typing.overload
    def setSetting(self, key: typing.Any, value: typing.Any, type: typing.Any, preserve: bool) -> None: ...
    def getSettings(self) -> typing.Any: ...
    def setId(self, id: typing.Any) -> None: ...
    def getId(self) -> typing.Any: ...
    def setName(self, name: typing.Any) -> None: ...
    def getName(self) -> typing.Any: ...
    def setTransformation(self, a0: typing.Any) -> None: ...
    def getTransformation(self) -> typing.Any: ...
    def getChildren(self) -> typing.Any: ...
    def getMeshData(self) -> 'MeshData': ...


class Scene(wrapper):

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, a0: 'Scene') -> None: ...

    def setUnit(self, unit: typing.Any) -> None: ...
    def getUnit(self) -> typing.Any: ...
    @typing.overload
    def setMetaDataEntry(self, key: typing.Any, entry: MetadataEntry) -> None: ...
    @typing.overload
    def setMetaDataEntry(self, key: typing.Any, value: typing.Any) -> None: ...
    @typing.overload
    def setMetaDataEntry(self, key: typing.Any, value: typing.Any, type: typing.Any) -> None: ...
    @typing.overload
    def setMetaDataEntry(self, key: typing.Any, value: typing.Any, type: typing.Any, preserve: bool) -> None: ...
    def getMetadata(self) -> typing.Any: ...
    def addSceneNode(self, node: typing.Optional[SceneNode]) -> None: ...
    def getAllSceneNodes(self) -> typing.Any: ...
    def getSceneNodes(self) -> typing.Any: ...


class MeshData(wrapper):

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, a0: 'MeshData') -> None: ...

    def setFacesFromBytes(self, data: typing.Any) -> None: ...
    def setVerticesFromBytes(self, data: typing.Any) -> None: ...
    def getFlatVerticesAsBytes(self) -> typing.Any: ...
    def getFacesAsBytes(self) -> typing.Any: ...
    def getVerticesAsBytes(self) -> typing.Any: ...


class ThreeMFParser(wrapper):

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, a0: 'ThreeMFParser') -> None: ...

    def sceneToString(self, scene: Scene) -> typing.Any: ...
    def parse(self, xml_string: typing.Any) -> Scene: ...
