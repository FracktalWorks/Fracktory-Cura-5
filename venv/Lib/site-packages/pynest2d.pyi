# The PEP 484 type hints stub file for the pynest2d module.
#
# Generated by SIP 6.7.11
#
# 


import enum


class BottomLeftConfig(wrapper):

    allow_rotations = ... # type: bool
    epsilon = ... # type: int
    min_obj_distance = ... # type: int

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, a0: 'BottomLeftConfig') -> None: ...


class Box(wrapper):

    @typing.overload
    def __init__(self, center: 'Point') -> None: ...
    @typing.overload
    def __init__(self, min: 'Point', max: 'Point') -> None: ...
    @typing.overload
    def __init__(self, width: int, height: int) -> None: ...
    @typing.overload
    def __init__(self, width: int, height: int, center: 'Point') -> None: ...
    @typing.overload
    def __init__(self, a0: 'Box') -> None: ...

    def center(self) -> 'Point': ...
    def area(self) -> int: ...
    def height(self) -> int: ...
    def width(self) -> int: ...
    def maxCorner(self) -> 'Point': ...
    def minCorner(self) -> 'Point': ...
    @staticmethod
    def infinite(center: 'Point') -> 'Box': ...


class Circle(wrapper):

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, center: 'Point', r: float) -> None: ...
    @typing.overload
    def __init__(self, a0: 'Circle') -> None: ...

    def area(self) -> float: ...
    @typing.overload
    def radius(self) -> float: ...
    @typing.overload
    def radius(self, r: float) -> None: ...
    @typing.overload
    def center(self) -> 'Point': ...
    @typing.overload
    def center(self, center: 'Point') -> None: ...


class DJDHeuristicConfig(wrapper):

    allow_parallel = ... # type: float
    force_parallel = ... # type: bool
    initial_fill_proportion = ... # type: float
    try_pairs = ... # type: bool
    try_reverse_order = ... # type: bool
    try_triplets = ... # type: bool
    waste_increment = ... # type: float

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, a0: 'DJDHeuristicConfig') -> None: ...


class Item(wrapper):

    @typing.overload
    def __init__(self, vertex_list: typing.Any) -> None: ...
    @typing.overload
    def __init__(self, a0: 'Item') -> None: ...

    @staticmethod
    def touches(sh1: 'Item', sh2: 'Item') -> bool: ...
    @staticmethod
    def intersects(sh1: 'Item', sh2: 'Item') -> bool: ...
    def resetTransformation(self) -> None: ...
    def transformedShape(self) -> 'Item': ...
    @typing.overload
    def inflation(self, distance: int) -> None: ...
    @typing.overload
    def inflation(self) -> int: ...
    def rotation(self) -> float: ...
    def rotate(self, radians: float) -> None: ...
    def translation(self) -> 'Point': ...
    def translate(self, delta: 'Point') -> None: ...
    def leftmostBottomVertex(self) -> 'Point': ...
    def rightmostTopVertex(self) -> 'Point': ...
    def referenceVertex(self) -> 'Point': ...
    def boundingBox(self) -> Box: ...
    @typing.overload
    def isInside(self, p: 'Point') -> bool: ...
    @typing.overload
    def isInside(self, sh: 'Item') -> bool: ...
    @typing.overload
    def isInside(self, box: Box) -> bool: ...
    @typing.overload
    def isInside(self, circle: Circle) -> bool: ...
    def holeCount(self) -> int: ...
    def vertexCount(self) -> int: ...
    def areHolesConvex(self) -> bool: ...
    def isHoleConvex(self, holeindex: int) -> bool: ...
    def isContourConvex(self) -> bool: ...
    def area(self) -> float: ...
    def setVertex(self, idx: int, v: 'Point') -> None: ...
    def vertex(self, idx: int) -> 'Point': ...
    def toString(self) -> typing.Any: ...
    @typing.overload
    def priority(self) -> int: ...
    @typing.overload
    def priority(self, priority: int) -> None: ...
    def markAsDisallowedAreaInBin(self, binid: int) -> None: ...
    def markAsFixedInBin(self, binid: int) -> None: ...
    def isDisallowedArea(self) -> bool: ...
    def isFixed(self) -> bool: ...
    @typing.overload
    def binId(self) -> int: ...
    @typing.overload
    def binId(self, idx: int) -> None: ...


class NfpConfig(wrapper):

    class Alignment(enum.Enum):
        CENTER = ... # type: NfpConfig.Alignment
        BOTTOM_LEFT = ... # type: NfpConfig.Alignment
        BOTTOM_RIGHT = ... # type: NfpConfig.Alignment
        TOP_LEFT = ... # type: NfpConfig.Alignment
        TOP_RIGHT = ... # type: NfpConfig.Alignment
        DONT_ALIGN = ... # type: NfpConfig.Alignment

    accuracy = ... # type: float
    alignment = ... # type: 'NfpConfig.Alignment'
    explore_holes = ... # type: bool
    parallel = ... # type: bool
    rotations = ... # type: unknown-type
    starting_point = ... # type: 'NfpConfig.Alignment'

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, a0: 'NfpConfig') -> None: ...


class Point(wrapper):

    @typing.overload
    def __init__(self, x: int, y: int) -> None: ...
    @typing.overload
    def __init__(self, a0: 'Point') -> None: ...

    def y(self) -> int: ...
    def x(self) -> int: ...


class Rectangle(wrapper):

    @typing.overload
    def __init__(self, width: int, height: int) -> None: ...
    @typing.overload
    def __init__(self, a0: 'Rectangle') -> None: ...

    @staticmethod
    def touches(sh1: Item, sh2: Item) -> bool: ...
    @staticmethod
    def intersects(sh1: Item, sh2: Item) -> bool: ...
    def resetTransformation(self) -> None: ...
    def transformedShape(self) -> Item: ...
    @typing.overload
    def inflation(self, distance: int) -> None: ...
    @typing.overload
    def inflation(self) -> int: ...
    def rotation(self) -> float: ...
    def rotate(self, radians: float) -> None: ...
    def translation(self) -> Point: ...
    def translate(self, delta: Point) -> None: ...
    def leftmostBottomVertex(self) -> Point: ...
    def rightmostTopVertex(self) -> Point: ...
    def referenceVertex(self) -> Point: ...
    def boundingBox(self) -> Box: ...
    @typing.overload
    def isInside(self, p: Point) -> bool: ...
    @typing.overload
    def isInside(self, sh: Item) -> bool: ...
    @typing.overload
    def isInside(self, box: Box) -> bool: ...
    @typing.overload
    def isInside(self, circle: Circle) -> bool: ...
    def holeCount(self) -> int: ...
    def vertexCount(self) -> int: ...
    def areHolesConvex(self) -> bool: ...
    def isHoleConvex(self, holeindex: int) -> bool: ...
    def isContourConvex(self) -> bool: ...
    def area(self) -> float: ...
    def toString(self) -> typing.Any: ...
    @typing.overload
    def priority(self) -> int: ...
    @typing.overload
    def priority(self, priority: int) -> None: ...
    def markAsFixedInBin(self, binid: int) -> None: ...
    def isFixed(self) -> bool: ...
    @typing.overload
    def binId(self) -> int: ...
    @typing.overload
    def binId(self, idx: int) -> None: ...
    def height(self) -> int: ...
    def width(self) -> int: ...


def nest(items: typing.Any, bin: Box, distance: int = ..., config: NfpConfig = ...) -> int: ...
